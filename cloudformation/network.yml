AWSTemplateFormatVersion: "2010-09-09"
Description: network_Layer Template

Parameters:
  NameBase: 
    Description: for network
    Type: String
    Default: lecture13

  # VPC
  VpcCIDR:
    Type: String
    Default: '10.0.0.0/16'

  # PublicSubnet
  PubSubCIDR1:
    Type: String
    Default: '10.0.0.0/20'

  PubSubAZ1:
    Type: String
    Default: 'ap-northeast-1a'

  PubSubCIDR2:
    Type: String
    Default: '10.0.16.0/20'

  PubSubAZ2:
    Type: String
    Default: 'ap-northeast-1c'

  # PrivateSubnet
  PriSubCIDR1:
    Type: String
    Default: '10.0.128.0/20'

  PriSubAZ1:
    Type: String
    Default: 'ap-northeast-1a'

  PriSubCIDR2:
    Type: String
    Default: '10.0.144.0/20'

  PriSubAZ2:
    Type: String
    Default: 'ap-northeast-1c'

Resources:

  # VPCの作成
  13VPC:              
    Type: AWS::EC2::VPC         
    Properties:             
      CidrBlock: !Ref VpcCIDR
      InstanceTenancy: default
      EnableDnsSupport: true
      EnableDnsHostnames: true

      Tags:
        - Key: Name
          Value: !Sub ${NameBase}-vpc

  # インターネットゲートウェイの作成
  13InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:

      Tags:
        - Key: Name
          Value: !Sub ${NameBase}-internetgateway

  13AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref 13InternetGateway
      VpcId: !Ref 13VPC

  #  Subnetの作成
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Ref PubSubAZ1
      CidrBlock: !Ref PubSubCIDR1
      MapPublicIpOnLaunch: 'true'
      VpcId: !Ref 13VPC
      Tags:
        - Key: Name
          Value: !Sub ${NameBase}-publicsubnet1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Ref PubSubAZ2
      CidrBlock: !Ref PubSubCIDR2
      MapPublicIpOnLaunch: 'true'
      VpcId: !Ref 13VPC
      Tags:
        - Key: Name
          Value: !Sub ${NameBase}-publicsubnet2

  PrivateSubnet1:      
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Ref PriSubAZ1
      CidrBlock: !Ref PriSubCIDR1
      MapPublicIpOnLaunch: 'false'
      VpcId: !Ref 13VPC
      Tags:
        - Key: Name
          Value: !Sub ${NameBase}-privatesubnet1

  PrivateSubnet2:      
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Ref PriSubAZ2
      CidrBlock: !Ref PriSubCIDR2
      MapPublicIpOnLaunch: 'false'
      VpcId: !Ref 13VPC
      Tags:
        - Key: Name
          Value: !Sub ${NameBase}-privatesubnet2

  #  ルートテーブルの作成
  PubRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 13VPC
      Tags:
        - Key: Name
          Value: !Sub ${NameBase}-publicrouteTable

  RoutePublic:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PubRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref 13InternetGateway

  PriRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 13VPC
      Tags:
        - Key: Name
          Value: !Sub ${NameBase}-privaterouteTable

  #  ルートテーブルをサブネットに関連付け
  RouteTableAssocPublic1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PubRouteTable

  RouteTableAssocPublic2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PubRouteTable

  RouteTableAssocPrivate1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PriRouteTable

  RouteTableAssocPrivate2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PriRouteTable

Outputs:
  VPC:
    Value: !Ref  13VPC
    Export:
      Name: !Sub  ${NameBase}-VPCid

  PublicSubnet1:
    Value: !Ref  PublicSubnet1  
    Export:
      Name: !Sub ${NameBase}-PublicSubnet1id

  PublicSubnet2:
    Value: !Ref  PublicSubnet2  
    Export:
      Name: !Sub ${NameBase}-PublicSubnet2id

  PrivateSubnet1:
    Value: !Ref  PublicSubnet1  
    Export:
      Name: !Sub ${NameBase}-PrivateSubnet1id

  PrivateSubnet2:
    Value: !Ref  PublicSubnet2  
    Export:
      Name: !Sub ${NameBase}-PrivateSubnet2id  
